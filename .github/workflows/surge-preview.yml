name: Surge Preview

on:
  workflow_run:
    workflows:
      - "PR Checks"
    types:
      - completed

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files.outputs.all }}
    steps:
      - name: Загрузка контента
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Выборка файлов для формирования списка
        id: files
        run: |
          pr_files=$(echo $(curl \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/doka-guide/content/pulls/${{ github.event.workflow_run.pull_requests[0].number }}/files))
          list=$(echo $pr_files | grep -o '"filename": "[^"]*' | cut -d'"' -f4)
          echo "::set-output name=all::$list"
          echo $list
  surge-preview:
    runs-on: ubuntu-latest
    needs:
      - prepare
    env:
      DEPLOY_DOMAIN: 'https://${{ github.repository_owner }}-content-pr-${{ github.event.workflow_run.pull_requests[0].number }}.surge.sh'
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - name: Загрузка platform
        uses: actions/checkout@v2
        with:
          repository: doka-guide/platform
      - name: Загрузка контента
        uses: actions/checkout@v2
        with:
          ref: refs/heads/${{ github.event.workflow_run.head_branch }}
          path: content
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Кэширование модулей
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Установка модулей
        run: npm ci
      - name: Получение идентификатора
        id: check
        if: ${{ env.SURGE_TOKEN != '' }}
        run: |
          check_suite_url=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }} | jq -r '.check_suite_url')
          check_run_id=$(curl -s -H "Accept: application/vnd.github.v3+json" $check_suite_url/check-runs | jq '.check_runs[] | .id')
          echo "::set-output name=check_id::$check_run_id"
      - name: Сообщение о начале публикации превью
        uses: hasura/comment-progress@v2.1.0
        if: ${{ env.SURGE_TOKEN != '' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.workflow_run.pull_requests[0].number }}
          id: surge-progress-${{ github.event.workflow_run.pull_requests[0].number }}
          message: 'Идёт сборка и публикация превью... [Подробнее](https://github.com/${{ github.repository }}/runs/${{ steps.check.outputs.check_id }}?check_suite_focus=true)'
          recreate: true
      - name: Форматирование списка файлов
        id: links
        run: |
          file_list=''
          for changed_file in ${{ needs.prepare.outputs.files }}; do
            replace='html'
            page=$(echo "${changed_file/md/$replace}")
            file_list=$(echo -e "${file_list}<li><a href="${{ env.DEPLOY_DOMAIN }}/${page}">${changed_file}</a></li>")
          done
          if ! [[ $file_list == '' ]]; then
            file_list=$(echo -e "<br><hr><p>Список ссылок на материалы:<ul>${file_list}</ul><p>")
          fi
          echo ::set-output name=list::$(echo -e "${file_list}")
      - name: Сборка и публикация сайта
        id: surge
        continue-on-error: true
        run: |
          node make-links.js --default
          npm run preview
          if ! [[ ${{ env.SURGE_TOKEN == '' }} ]]; then
            npx surge ./dist ${{ env.DEPLOY_DOMAIN }} --token ${{ env.SURGE_TOKEN }}
          else
            echo 'Публикация для форка репозитория'
            npx surge ./dist ${{ env.DEPLOY_DOMAIN }} --token '6973bdb764f0d5fd07c910de27e2d7d0'
          fi
          echo 'Ссылка на превью — ${{ env.DEPLOY_DOMAIN }}'
          echo -e "${{ steps.links.outputs.list }}"
      - name: Сообщение об успехе публикации превью
        uses: hasura/comment-progress@v2.1.0
        if: ${{ env.SURGE_TOKEN != '' && steps.surge.conclusion == 'success' && steps.links.conclusion == 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.workflow_run.pull_requests[0].number }}
          id: surge-progress-${{ github.event.workflow_run.pull_requests[0].number }}
          message: '<details><summary><a href="${{ env.DEPLOY_DOMAIN }}">Превью контента</a> из ${{ github.event.workflow_run.head_sha }} опубликовано.</summary>${{ steps.links.outputs.list }}</details>'
          recreate: true
      - name: Сообщение о неудаче публикации превью
        uses: hasura/comment-progress@v2.1.0
        if: ${{ env.SURGE_TOKEN != '' && steps.surge.conclusion != 'success' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          number: ${{ github.event.workflow_run.pull_requests[0].number }}
          id: surge-progress-${{ github.event.workflow_run.pull_requests[0].number }}
          message: 'Превью контента из ${{ github.event.workflow_run.head_sha }} не опубликовано. Ошибка сборки или публикации. [Подробнее](https://github.com/${{ github.repository }}/runs/${{ steps.check.outputs.check_id }}?check_suite_focus=true)'
          fail: true
          recreate: true
